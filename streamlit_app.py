# -*- coding: utf-8 -*-
"""AI agent Gemini

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15wHE7qShCdeSvJC9sLXG1Q4EEq2lFaA6
"""

import streamlit as st
import pandas as pd
import pdfplumber
import os
import matplotlib.pyplot as plt
import google.generativeai as genai

# Load Gemini API key
gemini_api_key = os.getenv("GEMINI_API_KEY") or st.secrets.get("GEMINI_API_KEY")

# Page config
st.set_page_config(page_title="AI Report Summarizer", layout="wide")
st.title("üìä AI Report Summarizer")
st.markdown("Upload your PDF or Excel report to get a concise, high-level summary powered by Gemini AI.")

# Sidebar settings
with st.sidebar:
    st.markdown("### ‚öôÔ∏è Summary Settings")
    summary_style = st.radio("Summary Style", ["Business Analyst", "Basic"])

# Function: Extract PDF text
def extract_text_from_pdf(file):
    with pdfplumber.open(file) as pdf:
        return "\n".join(
            page.extract_text() for page in pdf.pages if page.extract_text()
        )

# Function: Generate summary using Gemini
def generate_summary(text_input, style="Business Analyst"):
    if not gemini_api_key:
        return "‚ùå Gemini API key is missing."

    try:
        genai.configure(api_key=gemini_api_key)
        model = genai.GenerativeModel('gemini-2.0-flash')

        if style == "Business Analyst":
            prompt = f"""
You are a business analyst.

Analyze the report below and summarize using bullet points:
- Key trends
- Patterns or outliers
- Timeframe or dates mentioned
- Financial/operational highlights
- Actionable insights (if any)

Report:
{text_input}
"""
        else:
            prompt = "Summarize this report in bullet points:\n\n" + text_input

        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"‚ùå Error from Gemini API: {e}"

# Function: Extract date range
def extract_date_range(df):
    for col in df.columns:
        try:
            df[col] = pd.to_datetime(df[col], errors='coerce')
            if df[col].notna().sum() > 0:
                return df[col].min().date(), df[col].max().date()
        except Exception:
            continue
    return None, None

# Function: Summarize Excel content
def summarize_excel(uploaded_file, style="Business Analyst"):
    df = pd.read_excel(uploaded_file)
    preview = df.head(5).to_string(index=False)

    start_date, end_date = extract_date_range(df)
    date_info = f"The data spans from **{start_date}** to **{end_date}**." if start_date and end_date else "The report has no recognizable dates."

    prompt = f"""
You are a business analyst.

The Excel file has {len(df)} rows and {len(df.columns)} columns.
{date_info}

Here's a sample of the data:
{preview}

Please provide a summary including:
- Key business trends
- Any outliers or insights
- Mention of any metrics over time
- Actionable recommendations
"""

    return generate_summary(prompt, style), df

# Function: Plotting
def show_basic_plot(df):
    df_copy = df.copy()
    for col in df_copy.columns:
        try:
            df_copy[col] = pd.to_datetime(df_copy[col], errors='coerce')
        except:
            continue

    date_cols = df_copy.select_dtypes(include=["datetime"]).columns
    numeric_cols = df.select_dtypes(include=["number"]).columns

    if len(date_cols) > 0 and len(numeric_cols) > 0:
        with st.expander("üìà View Auto-Generated Plot"):
            st.markdown("Auto-selected columns for plotting.")
            selected_date = st.selectbox("Select Date Column", date_cols)
            selected_metric = st.selectbox("Select Numeric Column", numeric_cols)

            fig, ax = plt.subplots()
            df_sorted = df.sort_values(by=selected_date)
            ax.plot(df_sorted[selected_date], df_sorted[selected_metric], marker='o')
            ax.set_title(f"{selected_metric} Over Time")
            ax.set_xlabel("Date")
            ax.set_ylabel(selected_metric)
            st.pyplot(fig)

# File uploader
uploaded_file = st.file_uploader("Upload a PDF or Excel File", type=["pdf", "xlsx"])

if uploaded_file:
    with st.spinner("Processing file..."):
        try:
            summary = ""
            df = None

            if uploaded_file.name.endswith(".pdf"):
                text = extract_text_from_pdf(uploaded_file)
                if not text.strip():
                    summary = "‚ùå No readable text found in the PDF. Ensure it's not image-based."
                else:
                    summary = generate_summary(text, summary_style)

            elif uploaded_file.name.endswith(".xlsx"):
                summary, df = summarize_excel(uploaded_file, summary_style)

            st.subheader("üìù Executive Summary")
            for line in summary.split('\n'):
                if line.strip().startswith("-"):
                    st.markdown(f"‚úÖ {line.strip()}")
                else:
                    st.markdown(line.strip())

            # Show plot if Excel
            if df is not None:
                show_basic_plot(df)

        except Exception as e:
            st.error(f"An error occurred: {e}")
