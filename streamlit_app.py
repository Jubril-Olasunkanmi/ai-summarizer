# -*- coding: utf-8 -*-
"""AI agent Gemini

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15wHE7qShCdeSvJC9sLXG1Q4EEq2lFaA6
"""
import streamlit as st
import pandas as pd
import pdfplumber
import os
import google.generativeai as genai # Import the Gemini library

# Load API key securely from Streamlit secrets or environment
# It's recommended to set this as a Streamlit secret named 'GEMINI_API_KEY'
gemini_api_key = os.getenv("GEMINI_API_KEY") or st.secrets.get("GEMINI_API_KEY")

# Page config
st.set_page_config(page_title="AI Report Summarizer", layout="wide")
st.title("üìä AI Report Summarizer")
st.markdown("Upload your PDF or Excel report to get a concise summary powered by Gemini AI.")

# Function: Extract PDF text
def extract_text_from_pdf(file):
    """
    Extracts text content from a PDF file using pdfplumber.
    """
    with pdfplumber.open(file) as pdf:
        # Join text from all pages, filtering out any empty pages
        return "\n".join(
            page.extract_text() for page in pdf.pages if page.extract_text()
        )

# Function: Generate Gemini summary
def generate_summary(text_input):
    """
    Generates a summary using the Gemini API with an improved, more directive prompt.
    """
    if not gemini_api_key:
        return "‚ùå Gemini API key is missing. Please set it in Streamlit Secrets (e.g., `st.secrets['GEMINI_API_KEY']`) or as an environment variable (GEMINI_API_KEY)."

    try:
        # Configure the Gemini API with the provided key
        genai.configure(api_key=gemini_api_key)
        
        # Initialize the GenerativeModel with 'gemini-2.0-flash'
        model = genai.GenerativeModel('gemini-2.0-flash')

        # --- IMPROVED PROMPT ---
        # This prompt is more directive, aiming to prevent hallucination and focus on facts.
        prompt = (
            "Based *strictly* on the following report, provide a concise summary in bullet points. "
            "Focus on key operational and revenue figures, including specific percentages and values where available. "
            "Do not infer or add information not explicitly present in the text. "
            "Clearly state which platform (CabZero, Bolt, or Uber) generated the highest revenue for both the daily and monthly periods mentioned.\n\n"
        ) + text_input

        # Make the API call to generate content
        response = model.generate_content(prompt)
        
        # Return the generated text content
        return response.text
    except Exception as e:
        # Catch any exceptions during the API call and return an error message
        return f"‚ùå Error from Gemini API: {e}"

# Function: Summarize Excel content
def summarize_excel(uploaded_file):
    """
    Reads an Excel file, extracts a preview, and generates a summary using Gemini.
    """
    df = pd.read_excel(uploaded_file)
    
    # Get a string representation of the first 5 rows for the prompt
    preview = df.head(5).to_string(index=False)
    
    # Construct a prompt that includes metadata about the Excel file and its preview
    prompt = f"The Excel file contains {len(df)} rows and {len(df.columns)} columns. Here's a preview of the data:\n{preview}\n\nSummarize this data in a few key insights, focusing on trends or significant values if apparent from the preview. Do not infer information beyond what is presented in the preview."
    
    # Generate the summary using the Gemini API
    return generate_summary(prompt)

# File uploader widget in the Streamlit app
uploaded_file = st.file_uploader("Upload a PDF or Excel File", type=["pdf", "xlsx"])

# Process the uploaded file if one exists
if uploaded_file:
    with st.spinner("Reading file and generating summary..."):
        try:
            summary = ""
            if uploaded_file.name.endswith(".pdf"):
                text = extract_text_from_pdf(uploaded_file)
                # Check if any text was extracted from the PDF
                if not text.strip(): # .strip() removes whitespace, so empty string means no content
                    summary = "‚ùå No readable text found in the PDF. Please ensure it's not an image-only PDF or that the text is selectable."
                else:
                    summary = generate_summary(text)
            elif uploaded_file.name.endswith(".xlsx"):
                summary = summarize_excel(uploaded_file)
            else:
                summary = "Unsupported file format. Please upload a PDF or Excel file."

            # Display the generated summary
            st.subheader("üìù Summary")
            st.success(summary)
        except Exception as e:
            # Catch any unexpected errors during file processing or summarization
            st.error(f"An error occurred: {str(e)}")

